// <auto-generated />
using System;
using BMarketo.Models.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BMarketo.Migrations.Products
{
    [DbContext(typeof(ProductsContext))]
    [Migration("20230502101934_ContactFormSubmissionUpdate")]
    partial class ContactFormSubmissionUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BMarketo.Models.Entities.Products.AdditionalInfoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("AdditionalInfo", (string)null);
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.CategoryEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.CommentsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.ContactSubmissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SaveUserInfo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SubmitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContactSubmissions");
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.DescriptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Descriptions", (string)null);
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.ProductImagesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages", (string)null);
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.ProductsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal?>("OldPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SKUNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryEntityId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.ReviewsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductReviews", (string)null);
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.ReviewsEntity+ShoppingDeliveryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ShoppingAndDelivery", (string)null);
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.TagEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TagName = "TopSelling"
                        },
                        new
                        {
                            Id = 2,
                            TagName = "BestCollection"
                        },
                        new
                        {
                            Id = 3,
                            TagName = "Discounted"
                        });
                });

            modelBuilder.Entity("ProductsEntityTagEntity", b =>
                {
                    b.Property<int>("ProductsEntityId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("ProductsEntityId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ProductTags", (string)null);
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.AdditionalInfoEntity", b =>
                {
                    b.HasOne("BMarketo.Models.Entities.Products.ProductsEntity", "Product")
                        .WithOne("AdditionalInfo")
                        .HasForeignKey("BMarketo.Models.Entities.Products.AdditionalInfoEntity", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.CommentsEntity", b =>
                {
                    b.HasOne("BMarketo.Models.Entities.Products.ProductsEntity", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.DescriptionEntity", b =>
                {
                    b.HasOne("BMarketo.Models.Entities.Products.ProductsEntity", "Product")
                        .WithOne("AdditionalDescription")
                        .HasForeignKey("BMarketo.Models.Entities.Products.DescriptionEntity", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.ProductImagesEntity", b =>
                {
                    b.HasOne("BMarketo.Models.Entities.Products.ProductsEntity", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.ProductsEntity", b =>
                {
                    b.HasOne("BMarketo.Models.Entities.Products.CategoryEntity", null)
                        .WithMany("Products")
                        .HasForeignKey("CategoryEntityId");

                    b.HasOne("BMarketo.Models.Entities.Products.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.ReviewsEntity", b =>
                {
                    b.HasOne("BMarketo.Models.Entities.Products.ProductsEntity", "Product")
                        .WithOne("Reviews")
                        .HasForeignKey("BMarketo.Models.Entities.Products.ReviewsEntity", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.ReviewsEntity+ShoppingDeliveryEntity", b =>
                {
                    b.HasOne("BMarketo.Models.Entities.Products.ProductsEntity", "Product")
                        .WithOne("ShoppingDelivery")
                        .HasForeignKey("BMarketo.Models.Entities.Products.ReviewsEntity+ShoppingDeliveryEntity", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductsEntityTagEntity", b =>
                {
                    b.HasOne("BMarketo.Models.Entities.Products.ProductsEntity", null)
                        .WithMany()
                        .HasForeignKey("ProductsEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMarketo.Models.Entities.Products.TagEntity", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.CategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BMarketo.Models.Entities.Products.ProductsEntity", b =>
                {
                    b.Navigation("AdditionalDescription")
                        .IsRequired();

                    b.Navigation("AdditionalInfo")
                        .IsRequired();

                    b.Navigation("Comments");

                    b.Navigation("ProductImages");

                    b.Navigation("Reviews")
                        .IsRequired();

                    b.Navigation("ShoppingDelivery")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
